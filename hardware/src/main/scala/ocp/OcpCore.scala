/*
 * Definitions for OCP as generated by the Patmos pipeline
 *
 * Authors: Wolfgang Puffitsch (wpuffitsch@gmail.com)
 *
 */

package ocp

import Chisel._

// Masters include a byte-enable signal
class OcpCoreMasterSignals(override val addrWidth : Int, override val dataWidth : Int)
  extends OcpMasterSignals(addrWidth, dataWidth) {
  val ByteEn = UInt((dataWidth/8).W)
}

// Master port
class OcpCoreMasterPort(addrWidth : Int, dataWidth : Int) extends Bundle() {
  val M = Output(new OcpCoreMasterSignals(addrWidth, dataWidth))
  val S = Input(new OcpSlaveSignals(dataWidth))
}

// Slave port is reverse of master port
class OcpCoreSlavePort(val addrWidth : Int, val dataWidth : Int) extends Bundle() {
  val M = Input(new OcpCoreMasterSignals(addrWidth, dataWidth))
  val S = Output(new OcpSlaveSignals(dataWidth))
}

// Provide a "bus" with a master port and a slave port to simplify plumbing
class OcpCoreBus(addrWidth : Int, dataWidth : Int) extends Module {
  val io = new Bundle {
    val slave = new OcpCoreSlavePort(addrWidth, dataWidth)
    val master = new OcpCoreMasterPort(addrWidth, dataWidth)
  }
  io.master <> io.slave
}
